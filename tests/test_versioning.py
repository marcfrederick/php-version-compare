import pytest

from php_version_compare import canonicalize_version, version_compare


@pytest.mark.parametrize(
    "version, expected",
    [
        ("", ""),
        ("", ""),
        ("1", "1"),
        ("1.2", "1.2"),
        ("1.2.3", "1.2.3"),
        ("4.3.2", "4.3.2"),
        ("4.3.2RC1", "4.3.2.RC.1"),
        ("4.3.2+dev3", "4.3.2.dev.3"),
        ("4.3.2-beta.1", "4.3.2.beta.1"),
        ("4.3.2_alpha", "4.3.2.alpha"),
        ("4.3.2_alpha.1", "4.3.2.alpha.1"),
        ("4.3.2_alpha.1.2", "4.3.2.alpha.1.2"),
        ("4.3.2_alpha.1.2.3", "4.3.2.alpha.1.2.3"),
        ("4.3.2-ALPHA", "4.3.2.ALPHA"),
        ("4.3.2-ALPHA+DEV", "4.3.2.ALPHA.DEV"),
        ("4.3.2+DEV", "4.3.2.DEV"),
        ("4.3.2_", "4.3.2."),
        ("4.3.2__alpha", "4.3.2..alpha"),
        ("4.3.2++dev", "4.3.2..dev"),
        ("_+_", "..."),
        ("_4.3.2", ".4.3.2"),
    ],
)
def test_canonicalize_version(version: str, expected: str) -> None:
    assert canonicalize_version(version) == expected


@pytest.mark.parametrize(
    "vers1, vers2, expected",
    [
        ("1", "2", -1),
        ("10", "2", 1),
        ("1.0", "1.1", -1),
        ("1.2", "1.0.1", 1),
        ("1.0-dev", "1.0-dev", 0),
        ("1.0-dev", "1.0a1", -1),
        ("1.0-dev", "1.0b1", -1),
        ("1.0-dev", "1.0RC1", -1),
        ("1.0-dev", "1.0rc1", -1),
        ("1.0-dev", "1.0", -1),
        ("1.0-dev", "1.0pl1", -1),
        ("1.0a1", "1.0-dev", 1),
        ("1.0a1", "1.0a1", 0),
        ("1.0a1", "1.0b1", -1),
        ("1.0a1", "1.0RC1", -1),
        ("1.0a1", "1.0rc1", -1),
        ("1.0a1", "1.0", -1),
        ("1.0a1", "1.0pl1", -1),
        ("1.0b1", "1.0-dev", 1),
        ("1.0b1", "1.0a1", 1),
        ("1.0b1", "1.0b1", 0),
        ("1.0b1", "1.0RC1", -1),
        ("1.0b1", "1.0rc1", -1),
        ("1.0b1", "1.0", -1),
        ("1.0b1", "1.0pl1", -1),
        ("1.0RC1", "1.0-dev", 1),
        ("1.0RC1", "1.0a1", 1),
        ("1.0RC1", "1.0b1", 1),
        ("1.0RC1", "1.0RC1", 0),
        ("1.0RC1", "1.0rc1", 0),
        ("1.0RC1", "1.0", -1),
        ("1.0RC1", "1.0pl1", -1),
        ("1.0rc1", "1.0-dev", 1),
        ("1.0rc1", "1.0a1", 1),
        ("1.0rc1", "1.0b1", 1),
        ("1.0rc1", "1.0RC1", 0),
        ("1.0rc1", "1.0rc1", 0),
        ("1.0rc1", "1.0", -1),
        ("1.0rc1", "1.0pl1", -1),
        ("1.0", "1.0-dev", 1),
        ("1.0", "1.0a1", 1),
        ("1.0", "1.0b1", 1),
        ("1.0", "1.0RC1", 1),
        ("1.0", "1.0rc1", 1),
        ("1.0", "1.0", 0),
        ("1.0", "1.0pl1", -1),
        ("1.0pl1", "1.0-dev", 1),
        ("1.0pl1", "1.0a1", 1),
        ("1.0pl1", "1.0b1", 1),
        ("1.0pl1", "1.0RC1", 1),
        ("1.0pl1", "1.0rc1", 1),
        ("1.0pl1", "1.0", 1),
        ("1.0pl1", "1.0pl1", 0),
        ("1.0foo", "1.0", -1),
        ("1.0foo", "1.0foo", 0),
        ("1.0", "1.0foo", 1),
    ],
)
def test_version_compare(vers1: str, vers2: str, expected: int) -> None:
    assert version_compare(vers1, vers2) == expected
